<style>
.harf-container {
  background: #fff;
  height: 65px;
  display: flex;
  align-items: center;
}
.half {
  flex: 1;
  text-align: center;
}
.half .half-title {
  font-size: 13px;
  color: #555;
  margin-bottom: 5px;
}
.half .half-bottom {
  font-size: 17px;
  color: #333;
}
.primary-color {
  color: #f90 !important;
}

.tabs .zan-tab__title {
  margin: 0;
  width: 80%;
}

.tabs .zan-tab__item--selected .zan-tab__title {
  border-color: #f60;
  color: #f60;
}

.sub-tabs {
  height: 35px;
}
.sub-tabs .zan-tab__title {
  font-size: 13px;
  height: 34px;
  line-height: 34px;
}

.sub-tabs .zan-tab__item--selected .zan-tab__title {
  border-color: #f90;
  color: #f90;
}

.m-t-1 {
  margin-top: 10px;
}

.record-item {
  background: #fff;
  margin-top: 10px;
  position: relative;
}

.record-item-image {
  position: absolute;
  right: 5px;
  top: 5px;
  width: 50px;
  height: 50px;
}

.record-item__hd {
  padding: 8px 15px;
}

.record-item__title {
  font-size: 14px;
  color: #333;
}

.record-item__bd {
  background: #f8f8f8;
  display: flex;
  align-items: center;
  padding: 8px 15px;
}

.record-item__preview {
  width: 180rpx;
  height: 180rpx;
  line-height: 180rpx;
  border: 0.5px solid #eee;
  background-color: #fff;
}
.record-item__preview image {
  width: 100%;
  height: 100%;
  vertical-align: middle;
}
.record-item__desc {
  flex: 1;
  margin-left: 10px;
  font-size: 12px;
  color: #555;
}
.record-item__ft {
  padding: 8px 15px;
  border-bottom: 0.5px solid #e5e5e5;
}
.record-item__extra {
  padding: 10px 15px;
}
.text-right {
  text-align: right;
}
.m-r-3 {
  margin-right: 30px;
}
.zan-btn--mini {
  font-size: 12px !important;
}

.tabs-placeholder {
  height: 80px;
  position: relative;
}
.tabs-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  z-index: 99;
  background-color: #fff;
}
.fixed {
  position: fixed !important;
}


</style>

<template>
  <view class="exch-records">
    <view class="harf-container">
      <view class="half">
        <view class="half-title">总积分</view>
        <view class="half-bottom">{{total_points}}</view>
      </view>
      <view class="half">
        <view class="half-title">可兑换积分</view>
        <view class="half-bottom primary-color">{{exch_points}}</view>
      </view>
    </view>
    <view class="tabs-placeholder m-t-1">
      <view class="tabs-wrapper {{tabFixed ? 'fixed' : ''}}">
        <view class="zan-tab tabs">
          <view class="zan-tab__bd">
            <repeat for="{{tabs}}">
              <view @tap="changeTab({{index}})" class="zan-tab__item {{index === tabIndex ? 'zan-tab__item--selected' : ''}}">
                <view class="zan-tab__title">{{item.label}}</view>
              </view>
            </repeat>
          </view>
        </view>
        <view class="zan-tab sub-tabs">
          <view class="zan-tab__bd">
            <repeat for="{{tabs[tabIndex].tabs}}">
              <view @tap="changeSubTab({{index}})" class="zan-tab__item {{index === subTabIndex ? 'zan-tab__item--selected' : ''}}">
                <view class="zan-tab__title">{{item.label}}</view>
              </view>
            </repeat>
          </view>
        </view>
      </view>
    </view>
    <view class="records-list">
      <repeat for="{{orders}}">
        <view class="record-item">
          <view class="record-item__hd">
            <view class="record-item__title">{{item.shopName}}</view>
          </view>
          <view @tap="viewOrder({{item.id}})" class="record-item__bd">
            <view class="record-item__preview">
              <image mode="aspectFit" src="{{item.goodsPreview}}"/>
            </view>
            <view class="record-item__desc">
              <view class="record-item__title">{{item.goodsName}}</view>
              <view class="text-right">x {{item.count}}</view>
              <view>
                <text wx:if="{{item.payType !== 1}}" class="m-r-3">积分：{{item.goodsPoints}}</text>
                <text wx:if="{{item.payType !== 0}}">价格：¥{{item.goodsPrice}}</text>
              </view>
            </view>
          </view>
          <view class="record-item__ft">
            <view class="record-item__title text-right">共花费：
              <text wx:if="{{item.payType !== 0}}">¥{{item.amount}}</text>
              <text wx:if="{{item.payType === 2}}"> + </text>
              <text wx:if="{{item.payType !== 1}}">{{item.exchPoints}}积分</text>
            </view>
          </view>
          <view class="record-item__extra text-right">
            <button @tap="goPay({{item.id}})" class="zan-btn zan-btn--mini zan-btn--danger zan-btn--plain" wx:if="{{item.status === 0}}">立即付款</button>
            <button class="zan-btn zan-btn--mini zan-btn--danger zan-btn--plain" wx:elif="{{item.status === 1}}" @tap="viewOrder({{item.id}})">查看详情</button>
            <block wx:else>
              <button @tap="goEval({{item.id}})" class="zan-btn zan-btn--mini zan-btn--primary zan-btn--plain" wx:if="{{item.canEval}}">我要评价</button>
              <button @tap="goExch({{item.goodsId}})" class="zan-btn zan-btn--mini zan-btn--warn zan-btn--plain" wx:else>再次兑换</button>
            </block>
          </view>
          <view wx:if="{{item.status === 3}}" class="record-item-image">
            <image style="width:100%;height:100%" src="/images/checked.png"/>
          </view>
          <view wx:elif="{{item.status === -3}}" class="record-item-image">
            <image style="width:100%;height:100%" src="/images/refund.png"/>
          </view>
        </view>
      </repeat>
    </view>
    <view hidden="{{!noData}}" class="zan-loadmore zan-loadmore--nodata">
      <view class="zan-loadmore__tips">暂无数据</view>
    </view>
  </view>
</template>

<script>
import wepy from "wepy";
import { api, root } from "@/config";
import request from "@/utils/request";
export default class extends wepy.component {
  data = {
    hasShown: false,
    total_points: 0,
    exch_points: 0,
    tabs: [
      {
        label: "礼品",
        value: "gift",
        tabs: [
          { label: "全部" },
          { label: "未使用", value: "2" },
          { label: "已核销", value: "3" }
        ]
      },
      {
        label: "商品",
        value: "goods",
        tabs: [
          { label: "全部" },
          { label: "未使用", value: "2" },
          { label: "已核销", value: "3" }
        ]
      },
      {
        label: "代金券",
        value: "voucher",
        tabs: [
          { label: "全部" },
          { label: "未使用", value: "2" },
          { label: "已核销", value: "3" }
        ]
      }
    ],
    tabIndex: 0,
    subTabIndex: 0,
    tabFixed: false,
    page: 1,
    noMore: false,
    noData: false,
    orders: []
  };

  limit = 10;

  methods = {
    changeTab(index) {
      this.tabIndex = index;
      setTimeout(() => {
        this.reset();
        this.fetchData();
      }, 0);
    },
    changeSubTab(index) {
      this.subTabIndex = index;
      setTimeout(() => {
        this.reset();
        this.fetchData();
      }, 0);
    },
    goEval(id) {
      const type = this.tabs[this.tabIndex].value;
      this.$root.$navigate(
        "/pages/customer/publishEval?type=" + type + "&id=" + id
      );
    },
    goExch(id) {
      const type = this.tabs[this.tabIndex].value;
      this.$root.$navigate(
        "/pages/customer/gift-goods?id=" + id + "&type=" + type
      );
    },
    goPay(id) {
      this.$root.$navigate(
        `/pages/customer/payment?orderId=${id}&frontUrl=${encodeURIComponent(
          api.payfront + "?type=navigateTo&url=/pages/customer/order?id=" + id
        )}&endUrl=${api.payback}`
      );
    },
    viewOrder(id) {
      this.$root.$navigate("/pages/customer/order?id=" + id);
    }
  };

  onPageScroll(scrollTop) {
    const tabFixed = scrollTop >= 75;
    if (tabFixed !== this.tabFixed) {
      this.tabFixed = tabFixed;
      this.$apply();
    }
  }

  onReachBottom() {
    if (!this.noData && !this.noMore) {
      setTimeout(() => {
        this.page++;
        this.fetchData();
      }, 0);
    }
  }

  onShow() {
    const { customer } = this.$root.$parent.globalData;
    if (!!customer) {
      this.total_points = customer.total_points;
      this.exch_points = customer.exch_points;
      this.$apply();

      if (!this.hasShown) {
        //this.hasShown = true;
        this.fetchData(true);
      }
    }
  }

  reset() {
    this.page = 1;
    this.noMore = this.noData = false;
    this.orders = [];
  }

  async fetchData(onShow = false) {
    const activeTab = this.tabs[this.tabIndex];
    const type = activeTab.value;
    const status = activeTab.tabs[this.subTabIndex].value;
    const { customerId } = this.$root.$parent.globalData;

    const queries = {
      limit: this.limit,
      page: this.page,
      order: "create_time DESC",
      customer_id: customerId
    };
    if (status !== undefined) {
      queries.status = status;
    }

    // 整体刷新
    if (onShow) {
      queries.limit = this.orders.length || this.limit;
      queries.page = 1;
    }

    let data = [];
    if (type === "gift") {
      data = await this.fetchGifts(queries);
    } else if (type === "goods") {
      data = await this.fetchGoods(queries);
    } else if (type === "voucher") {
      data = await this.fetchVouchers(queries);
    }

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < queries.limit) {
      this.noMore = true;
    }
    this.orders = onShow ? data : this.orders.concat(data);
    this.$apply();
  }

  async fetchGifts(queries) {
    queries.type = 0;
    queries.include = "netspot,gift";
    let data = await request(api.orders, { data: queries });
    return data.map(item => ({
      id: item.id,
      status: item.status,
      shopName: item.netspot.name,
      goodsName: item.gift.name,
      goodsId: item.gift.id,
      goodsPreview: root + item.gift.imgs.split(",")[0],
      goodsPoints: item.exch_points,
      goodsPrice: (item.price / 100).toFixed(2),
      exchPoints: item.total_points,
      amount: (item.amount / 100).toFixed(2),
      count: item._count,
      eval_id: item.eval_id,
      canEval: item.status === 3 && !item.eval_id,
      payType: item.pay_type
    }));
  }

  async fetchGoods(queries) {
    queries.type = 2;
    queries.include = "shop,goods";
    let data = await request(api.orders, { data: queries });
    return data.map(item => ({
      id: item.id,
      status: item.status,
      goodsId: item.goods.id,
      shopName: item.shop.name,
      goodsName: item.goods.name,
      goodsPreview: root + item.goods.previews.split(",")[0],
      goodsPoints: item.exch_points,
      goodsPrice: (item.price / 100).toFixed(2),
      exchPoints: item.total_points,
      amount: (item.amount / 100).toFixed(2),
      count: item._count,
      eval_id: item.eval_id,
      canEval: item.status === 3 && !item.eval_id,
      payType: item.pay_type
    }));
  }

  async fetchVouchers(queries) {
    queries.type = 1;
    queries.include = "shop,voucher";
    let data = await request(api.orders, { data: queries });
    return data.map(item => ({
      id: item.id,
      goodsId: item.voucher.id,
      status: item.status,
      shopName: item.shop.name,
      goodsName: item.voucher.name,
      goodsPreview: root + item.voucher.img.split(",")[0],
      goodsPoints: item.exch_points,
      goodsPrice: (item.price / 100).toFixed(2),
      exchPoints: item.total_points,
      amount: (item.amount / 100).toFixed(2),
      count: item._count,
      eval_id: item.eval_id,
      canEval: item.status === 3 && !item.eval_id,
      payType: item.pay_type
    }));
  }
}
</script>
