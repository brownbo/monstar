<style>
.merchant-header {
  background-color: #fff;
}
.distances {
  padding-left: 30rpx;
  height: 40px;
  font-size: 12px;
  color: #333;
  line-height: 40px;
}
.distance {
  margin-right: 20rpx;
}
.merchant-shops {
  margin-top: 85px;
  background-color: #fff;
}
.recommend-merchant {
  padding: 30rpx 0 30rpx 30rpx;
  border-bottom: 1rpx solid #e5e5e5;
}
.searchbar-wrapper {
  display: flex;
  padding: 10px 10px 5px 10px;
  background-color: #fff;
  position: relative;
  z-index: 20;
}

.fixed {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  border-bottom: 0.5px solid #dedede;
  z-index: 1;
}

.merchants-selector {
  z-index: 10;
}

.searchbar {
  flex: 1;
  padding: 0 15px;
  border: 0.5px solid #bbb;
  border-radius: 40rpx;
  font-size: 13px;
  color: #888;
  display: flex;
  align-items: center;
  height: 30px;
}
.search-icon {
  width: 48rpx;
  height: 48rpx;
}
.search-input {
  flex: 1;
  margin: 0 5px;
}
.search-input-value {
  color: #222;
  font-size: 14px;
}
.search-clear {
  font-size: 18px;
  color: #bbb;
}
.selector__item--active .selector__title {
  color: #f60;
}
.selector__option--selected {
  background: none;
  color: #f60;
}

.selector__option--selected:before {
  position: absolute;
  left: 20px;
  line-height: 36px;
  content: "\e819";
  font-family: zanui-weapp-icon !important;
}

.selector__option {
  padding: 0 0 0 48px;
  line-height: 36px;
  position: relative;
}
</style>
<template>
  <view class="merchant">
    <view class="merchant-header fixed">
      <view class="searchbar-wrapper">
        <view class="searchbar">
          <image class="search-icon" src="/images/search.png"/>
          <navigator hover-class="none" url="/pages/common/search?type=merchant&keywords={{keywords}}" class="search-input {{!!keywords ? 'search-input-value' : ''}}">{{keywords || "搜索"}}</navigator>
          <view hidden="{{!keywords}}" class="search-clear zan-icon zan-icon-clear" @tap="clearSearch"></view>
        </view>
      </view>
      <selector class="merchants-selector" :options.sync="selectorItems"/>
    </view>
    <view class="merchant-shops">
      <repeat for="{{shops}}" key="index" index="index" item="item">
        <view @tap="viewShop({{index}})">
          <merchant class="recommend-merchant" :item="item"/>
        </view>
      </repeat>
    </view>
    <view hidden="{{!noData}}" style="margin-top: 200px;" class="zan-loadmore zan-loadmore--nodata">
      <view class="zan-loadmore__tips">暂无数据</view>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";
import { api, root } from "@/config";
import request from "@/utils/request";
import merchant from "@/components/customer/merchant";
import selector from "@/components/common/selector";
export default class extends wepy.page {
  config = {
    navigationBarTitleText: "商户列表"
  };

  components = {
    merchant,
    selector
  };

  data = {
    keywords: "",
    selectorItems: [
      {
        title: "商户类型",
        value: "shop_type_id",
        options: [{ title: "全部", value: "", selected: true }]
      },
      {
        title: "附近（智能范围）",
        value: "distance",
        options: [
          { title: "不限", value: "", selected: true },
          // { title: "500m", value: "500" },
          // { title: "1000m", value: "1000" },
          // { title: "2000m", value: "2000" },
          // { title: "5000m", value: "5000" }
          { title: "1000m", value: "1000" },
          { title: "5000m", value: "5000" },
        ]
      }
    ],
    noMore: false,
    noData: false,
    page: 1,
    shops: [],
    is_active: false
  };

  watch = {
    selectorItems() {
      if (this.gotShopTypes) {
        setTimeout(() => {
          this.reset();
          this.fetchShops();
        }, 0);
      }
    }
  };

  limit = 10;

  methods = {
    viewShop(index) {
      const shop = this.shops[index];
      this.$preload(shop);
      this.$navigate(
        "/pages/customer/merchant?id=" + shop.id + "&name=" + shop.name
      );
    },
    clearSearch() {
      this.keywords = "";
      setTimeout(() => {
        this.reset();
        this.fetchShops();
      }, 0);
    }
  };

  onReachBottom() {
    if (!this.noData && !this.noMore) {
      setTimeout(() => {
        this.page++;
        this.fetchShops();
      }, 0);
    }
  }

  onLoad({ is_active }) {
    if (is_active) {
      this.is_active = true;
      wx.setNavigationBarTitle({ title: "热门商户" });
    }
    this.fetchShops();
    this.fetchShopTypes();
  }

  onShow() {
    const { doSearch, searchKeywords: { keywords } } = this.$parent.globalData;
    if (doSearch) {
      this.$parent.globalData.doSearch = false;
      this.keywords = keywords;
      setTimeout(() => {
        this.reset();
        this.fetchShops();
      }, 0);
    }
  }

  reset() {
    this.noMore = false;
    this.noData = false;
    this.shops = [];
    this.page = 1;
  }

  async fetchShopTypes() {
    const shopTypes = await request(api.shopTypes);
    const options = shopTypes.map(option => ({
      title: option.name,
      value: option.id
    }));
    this.selectorItems[0].options = this.selectorItems[0].options.concat(
      options
    );
    this.gotShopTypes = true;
  }

  async fetchShops() {
    const queries = {
      limit: this.limit,
      page: this.page,
      examine_status: 3,
      enabled: 1,
      status: 1
    };

    if (this.is_active) {
      queries.is_active = true;
    } else {
      queries.include = "voucher";
      queries._group = "shop.id";
    }

    if (this.keywords) {
      queries.name = this.keywords;
    }

    for (let item of this.selectorItems) {
      const selectedOption = item.options.find(option => option.selected);
      if (selectedOption && selectedOption.value) {
        queries[item.value] = selectedOption.value;
      }
    }

    const { location } = this.$root.$parent.globalData;
    if (location) {
      queries.lat = location.lat;
      queries.long = location.long;
    }

    let data = await request(api.shops, { data: queries });
    data.forEach(item => {
      if (!!item.shop_img) {
        item.shop_img = item.shop_img.split(",").map(_ => root + _);
        item.preview = item.shop_img[0];
      }
      item.voucher = (item.voucher && item.voucher.name) || "";
    });

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noMore = true;
    }
    this.shops = this.shops.concat(data);
    this.$apply();
  }
}
</script>
