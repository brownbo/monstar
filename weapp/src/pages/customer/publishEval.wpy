<style>
  .my-header {
    padding: 20rpx;
    color: #ff9900;
    font-size: 40rpx;
  }
  .zan-panel {
    margin-top: 0;
  }
  .zan-cell__ft {
    flex: 2;
    text-align: left;
  }
  .zan-btn--primary {
    background-color: #ff9900;
    border-color: #ffaa00;
  }
  .zan-top{
    margin-top: 8px;
  }
  .zan-top-border{
    background:#fff;
    border-top:1rpx solid #e5e5e5;
    overflow:hidden;
  }
  .zan-bottom-border{
    background:#fff;
    border-bottom:1rpx solid #e5e5e5;
    overflow:hidden;
  }
  .zan-cell-eval{
    position:relative;
    display: flex;
    padding:12px 15px;
    align-items:center;
    line-height:1.4;
    font-size:14px;
  }
  .eval{
    border: 1px solid #FF0000;
    border-radius: 15px;
    font-size: 30rpx;
    color: #FF0000;
    padding: 5px 15px;
  }
  .eval-flex{
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .eval-goods{
    font-size: 36rpx;
  }
  .text-right{
    text-align: right;
    font-size: 30rpx;
    color: #888888;
  }
  .zan-cell-color{
    font-size: 34rpx;
    color: #ff8855;
  }
  .my-ib{
    display: inline-block;
  }
  .zan-font-18{
    font-size: 20px;
  }
  .zan-width{
    width:75px;
  }

</style>

<template>
  <view class="my">
    <view class="zan-top-border">
      <view class="zan-cell-eval zan-top-border">
        <text class="zan-c-gray-dark zan-width">描述相符</text>
        <view class="zan-font-18 my-ib" bindtap="myStarChoose">
          <block wx:for="{{starMap}}" wx:key="{{index}}">
            <text wx:if="{{star>=index+1}}" style="padding-right: .5em" class="zan-c-red" data-star="{{index+1}}">★</text>
            <text wx:if="{{star<index+1}}" style="padding-right: .5em" class="zan-c-gray-dark" data-star="{{index+1}}">☆</text>
          </block>
        </view>
        <!--★-->
        <text class="zan-c-gray-dark">{{starMap[star-1]}}</text>
      </view>
      <view class="zan-top-border zan-cell-eval">
        <textarea id="content" bindinput="bindinput" focus class="zan-cell__bd zan-field__placeholder"
                  placeholder="亲,填写你的评价信息"/>
      </view>
    </view>

    <view class="zan-top zan-top-border">
      <view class="zan-cell-eval eval-flex">
       <view @tap="submit" class="eval">提交评论</view>
      </view>
    </view>
  </view>
  <toptips/>
</template>

<script>
  import wepy from "wepy";
  import { api, root } from "@/config";
  import request from "@/utils/request";
  import toptips from "@/components/common/toptips";
  import toast from "@/components/common/toast";
  export default class extends wepy.page {
    config = {
      navigationBarTitleText: "发表评价"
    };
    data = {
      name: "",
      content:'',
      cutomerId:'',
      type:'',
      goodsId:'',
      giftId:'',
      orderId:'',
      star: 5,
      starMap: [
        '非常差',
        '差',
        '一般',
        '好',
        '非常好',
      ],
    };
    components = {
      toptips,
      toast
    };
    methods = {
      bindinput(e) {
        this[e.target.id] = e.detail.value;
      },
      submit() {
        if(this.type=='gift'){
          this.publishEval();
        }else if(this.type='goods'){

          this.publishGoodsEval();
        }

      }
    };
    myStarChoose(e) {
      let star = parseInt(e.target.dataset.star) || 1;
      this.star=star;
    }
    async publishEval() {
      if(this.content==''){
        this.showTopTips("评价内容不能为空")
        return ;
      }
      try {
        console.log(this.giftId)
        const data = await request(api.giftEvals,
          {
            method: "POST",
            data: {
                eval_time:new Date(),
                eval_content:this.content,
                eval_customer_id:this.customerId,
                is_first_eval:'1',
                gift_id:this.giftId,
                stars:this.star,
                order_id:this.orderId,
            }
          }
        );
        this.updateSuccess(data);
      } catch (err) {
        console.log(err)
        this.updateFail(err);
      }
    }


    async publishGoodsEval() {
      if(this.content==''){
        this.showTopTips("评价内容不能为空")
        return;
      }
      try {
        const data = await request(api.goodsEvals,
          {
            method: "POST",
            data: {
              eval_time:new Date(),
              eval_content:this.content,
              eval_customer_id:this.customerId,
              is_first_eval:1,
              goods_id:this.goodsId,
              stars:this.star,
              order_id:this.orderId,
            }
          }
        );
        this.updateSuccess(data);
      } catch (err) {
        this.updateFail(err);
      }
    }
    updateSuccess(data) {
      wx.showToast({
        title: "提交成功",
        icon: "success",
        duration: 1000
      });
      setTimeout(() => {
        wx.navigateBack();
      }, 1000);
    }
    updateFail(err) {
      this.$invoke("toast", "showToast", err.message, 1200);
    }
    showTopTips(content, duration) {
      this.$invoke("toptips", "showTopTips", content, duration);
    }

    onLoad({type,id}) {

      this.customerId=this.$root.$parent.globalData.customerId;
      this.type=type;
      this.fetInfo(type,id)
      this.$apply();
    }

    async fetInfo(type,id) {
      // 同步信息
      try {

        const order = await request(api.order.replace(":id",id));

        if (order) {
          this.orderId=id;
          this.hidden = true;
        }
        if(type=='goods'){
          this.goodsId=order.goods_id;
        }else if(type=='gift'){
          this.giftId=order.gift_id;
        }
        // 刷新
        this.$wxpage.onShow();
      } catch (err) {
        console.error(err.message);
      }
    }

  }
</script>
