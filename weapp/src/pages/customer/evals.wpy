<style>
.eval-list {
  background-color: #fff;
  border-top: 0.5px solid #e5e5e5;
  border-bottom: 0.5px solid #e5e5e5;
}
.eval-cell {
  border-bottom: 0.5px solid #e5e5e5;
}

.eval-cell:last-child {
  border: none;
}

.eval-cell {
  padding: 12px 15px 12px 0;
  margin-left: 12px;
  line-height: 1.4;
  font-size: 14px;
}

.eval-cell__bd {
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: #666;
}
.eval-cell__ft {
  font-size: 14px;
  margin-top: 10rpx;
  color: #444;
}
.eval-cell__text {
  font-size: 13px;
  color: #666;
}
.eval-stars {
  color: #f60;
  letter-spacing: 1px;
  font-size: 11px;
}
.tags {
  flex-wrap: wrap;
}

.tag-wrapper {
  margin: 5px 0;
}

.tag-wrapper + .tag-wrapper {
  margin-left: 8px;
}
</style>
<template>
  <view>
    <view class="tags zan-cell zan-cell--last-child">
      <repeat for="{{tags}}">
        <view class="tag-wrapper">
          <view class="zan-tag zan-tag--warn">{{item}}</view>
        </view>
      </repeat>
    </view>
    <view class="eval-list">
      <repeat for="{{evals}}">
        <view class="eval-cell">
          <view class="eval-cell__bd">
            <view class="zan-cell__bd">
              <view class="eval-cell__text ">{{item.customer}}</view>
              <view class="eval-cell__text eval-stars">{{item.stars}}</view>
            </view>
            <view class="zan-cell__desc">{{item.date}}</view>
          </view>  
          <view class="eval-cell__ft">{{item.eval}}</view>
        </view>
      </repeat>
    </view>
    <view hidden="{{!noData}}" class="zan-loadmore zan-loadmore--nodata">
      <view class="zan-loadmore__tips">暂无评价</view>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";
import { api, root } from "@/config";
import request from "@/utils/request";
import { getLocaleDateString } from "@/utils/format";
export default class extends wepy.page {
  config = {
    navigationBarTitleText: "用户评价"
  };

  data = {
    type: "gift",
    id: "",
    noMore: false,
    noData: false,
    page: 1,
    count: 0,
    evals: [],
    tags: []
  };

  limit = 10;

  watch = {
    count() {
      wx.setNavigationBarTitle({ title: "用户评价(" + this.count + ")" });
    }
  };

  onLoad({ type, id }) {
    this.id = id;
    if (type === "goods") {
      this.type = type;
    }
    this.fetchData();
  }

  onReachBottom() {
    if (!this.noData && !this.noMore) {
      setTimeout(() => {
        this.page++;
        this.fetchData();
      }, 0);
    }
  }

  fetchData() {
    return this.type === "gift"
      ? this.fetchGiftEvals()
      : this.fetchGoodsEvals();
  }

  async fetchGiftEvals() {
    let data = await request(api.giftEvals, {
      data: {
        count: this.count === 0,
        gift_id: this.id,
        include: "eval_customer",
        is_first_eval: 1,
        limit: this.limit,
        page: this.page,
        order: "eval_time DESC"
      }
    });
    if (data.count !== undefined) {
      this.count = data.count;
      data = data.rows;
    }
    data = data.map(item => ({
      customer: item.eval_customer.name,
      date: getLocaleDateString(item.eval_time),
      eval: item.eval_content,
      stars: item.stars
    }));

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noMore = true;
    }
    this.evals = this.evals.concat(data);
    this.$apply();
  }

  async fetchGoodsEvals(id) {
    let data = await request(api.goodsEvals, {
      data: {
        count: this.count === 0,
        goods_id: this.id,
        include: "eval_customer",
        is_first_eval: 1,
        limit: this.limit,
        page: this.page,
        order: "eval_time DESC"
      }
    });
    if (data.count !== undefined) {
      this.count = data.count;
      data = data.rows;
    }
    data = data.map(item => ({
      customer: item.eval_customer.name,
      date: getLocaleDateString(item.eval_time),
      eval: item.eval_content,
      stars: "★★★★★☆☆☆☆☆".substr(5 - item.stars, 5)
    }));

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noMore = true;
    }
    this.evals = this.evals.concat(data);
    this.$apply();
  }
}
</script>
