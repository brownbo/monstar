<style>
.fixed-header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
}
.zan-tab__title {
  padding: 0 20px;
  margin: 0;
}
.zan-tab__item--selected .zan-tab__title {
  color: #f60;
  border-color: #f60;
}
.content {
  padding-top: 45px;
}
.eval-item {
  background-color: #fff;
  padding: 10px 15px;
  display: flex;
  margin-bottom: 30rpx;
}

.eval-item__hd {
  margin-right: 15px;
  width: 100px;
  height: auto;
  flex-shrink: 0;
}

.eval-item__bd {
}
.m-b-1 {
  margin-bottom: 10rpx;
}
.eval-item__title {
  font-size: 14px;
  color: #f90;
}
.eval-item__desc {
  font-size: 13px;
  color: #555;
}
.eval-item__extra {
  color: #888;
  font-size: 12px;
}
</style>
<template>
  <view>
    <view class="fixed-header zan-tab">
      <view class="zan-tab__bd">
        <view @tap="changeTab({{index}})" wx:for="{{tabs}}" wx:key="value" class="zan-tab__item {{activeTabIndex === index ? 'zan-tab__item--selected' : ''}}">
          <view class="zan-tab__title">{{item.label}}</view>
        </view>
      </view>
    </view>
    <view class="content">
       <view @tap="viewGoodsGift({{index}})" class="eval-item" wx:for="{{evals}}" wx:key="id">
         <image class="eval-item__hd" src="{{item.preview}}" mode="widthFix"/>
         <view class="eval-item__bd">
           <view class="eval-item__title m-b-1">{{item.name}}</view>
           <view class="eval-item__desc m-b-1">{{item.eval}}</view>
           <view class="eval-item__extra">{{item.date}}</view>
         </view>
       </view>
    </view>
    <view hidden="{{!noData}}" class="zan-loadmore zan-loadmore--nodata">
      <view class="zan-loadmore__tips">暂无数据</view>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";
import { api, root } from "@/config";
import request from "@/utils/request";
import { getLocaleFullDateString } from "@/utils/format";
export default class extends wepy.page {
  config = {
    navigationBarTitleText: "我的评价"
  };

  data = {
    evals: [],
    page: 1,
    noMore: false,
    noData: false,
    tabs: [{ label: "商品评价", value: "goods" }, { label: "礼品评价", value: "gift" }],
    activeTabIndex: 0
  };

  limit = 10;

  methods = {
    changeTab(index) {
      this.activeTabIndex = index;
      setTimeout(() => {
        this.reset();
        this.fetchData();
      }, 0);
    },
    viewGoodsGift(index) {
      const targetId = this.evals[index].targetId;
      const type = this.tabs[this.activeTabIndex].value;
      this.$navigate(
        "/pages/customer/gift-goods?type=" + type + "&id=" + targetId
      );
    }
  };

  onLoad() {
    this.fetchData();
  }

  onReachBottom() {
    if (!this.noData && !this.noMore) {
      setTimeout(() => {
        this.page++;
        this.fetchData();
      }, 0);
    }
  }

  reset() {
    this.noMore = this.noData = false;
    this.page = 1;
    this.evals = [];
  }

  fetchData() {
    const type = this.tabs[this.activeTabIndex].value;
    type === "goods" ? this.fetchGoodsEvals() : this.fetchGiftEvals();
  }

  async fetchGiftEvals() {
    const { customerId } = this.$parent.globalData;
    let data = await request(api.giftEvals, {
      data: {
        eval_customer_id: customerId,
        is_first_eval: 1,
        page: this.page,
        limit: this.limit,
        include: "gift",
        order: "eval_time DESC"
      }
    });
    data = data.map(item => ({
      id: item.id,
      targetId: item.gift.id,
      name: item.gift.name,
      eval: item.eval_content,
      preview: root + item.gift.imgs.split(",")[0],
      date: getLocaleFullDateString(item.eval_time)
    }));

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noMore = true;
    }
    this.evals = this.evals.concat(data);
    this.$apply();
  }

  async fetchGoodsEvals() {
    const { customerId } = this.$parent.globalData;
    let data = await request(api.goodsEvals, {
      data: {
        eval_customer_id: customerId,
        include: "goods",
        is_first_eval: 1,
        limit: this.limit,
        page: this.page,
        order: "eval_time DESC"
      }
    });
    data = data.map(item => ({
      id: item.id,
      targetId: item.goods.id,
      name: item.goods.name,
      preview: root + item.goods.previews.split(",")[0],
      eval: item.eval_content,
      date: getLocaleFullDateString(item.eval_time)
    }));

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noMore = true;
    }
    this.evals = this.evals.concat(data);
    this.$apply();
  }
}
</script>
