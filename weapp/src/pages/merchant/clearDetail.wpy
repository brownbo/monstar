<style>
.panel-padding{
  padding: 40rpx 30rpx;
}
.zan-tab__item--selected .zan-tab__title {
  color: #f60;
  border-color: #f60;
}
.zan-col{
  text-align: center;
}
.col-h{
  color: #000;
  font-size: 32rpx;
}
.col-f{
  font-size: 26rpx;
}
.menu-view{
  display: flex;
  font-size: 30rpx;
  position: relative;
}
.menu-item{
  padding: 16rpx 30rpx;
  display: flex;
}
.menu-item-end{
  flex:1;
  display: flex;
  justify-content: flex-end;
}
.search-btn{
  padding: 0rpx 0rpx 0rpx 20rpx;
  border-left: 1rpx #eee solid;
}
.marginleft{
  margin-left: 100rpx;
}
.my-icon-down{
  font-size: 20rpx;
  transform:rotate(90deg);
}
.list-day-text{
  font-size: 28rpx;
  line-height: 40rpx;
}
.list-li{
  background-color: #fff;
}
.cell-img{
  width: 120rpx;
  height: 120rpx;
  border-radius: 50%;
  background-color: #eee;
}
.zan-cell{
  line-height: 60rpx;
}
.cell-c{
  padding: 0rpx 16rpx;
}
.cell-r{
  flex:1;
  text-align: right;
}
.cell-money{
  font-size: 34rpx;
}
.cell-small{
  font-size: 24rpx;
}
.cell-status{
  display: inline-block;
  border:2rpx solid;
  line-height: 40rpx;
  border-radius: 8rpx;
  padding: 0rpx 10rpx;
  margin-right: 20rpx;
}
.zan-tag{
  margin-right: 20rpx;
}
.zan-tag--recd{
  background-color: #108ee9;
  border-color: #108ee9;
}
.zan-tag--new{
  background-color: #AF874D;
  border-color: #AF874D;
}
.search-time-text{
  padding: 16rpx 20rpx;
}
.nomarginbordertop{
  margin-top: 0;
  border-top: 0;
}
</style>
<template>
  <view class="zan-panel nomarginbordertop panel-padding">
    <view class="zan-row">
      <view class="zan-col zan-col-8">
        <view class="col-h zan-font-bold">{{sumResult.sum_today_price}}</view>
        <view class="col-f zan-c-gray-dark">今日结算金额</view>
      </view>
      <view class="zan-col zan-col-8">
        <view class="col-h zan-font-bold">{{sumResult.wait_sum_price}}</view>
        <view class="col-f zan-c-gray-dark">未结算金额</view>
      </view>
      <view class="zan-col zan-col-8">
        <view class="col-h zan-font-bold">{{sumResult.sum_price}}</view>
        <view class="col-f zan-c-gray-dark">总结算金额</view>
      </view>
    </view>
  </view>
  <view class="zan-panel menu-view">
    <picker bindchange="bindPickerChangeTime" value="{{index}}" range="{{array_time}}">
      <view class="menu-item zan-c-gray-dark">
        <view>{{search_type==='curr_day'?'今日':''}}
          {{search_type==='curr_month'?'当月':''}}
          {{search_type==='prev_month'?'上月':''}}
          {{search_type==='other'?'选择':''}}
        </view>
        <view class="zan-icon zan-icon-arrow my-icon-down"></view>
      </view>
    </picker>
    <picker bindchange="bindPickerChangeType" value="{{index}}" range="{{array_type}}">
      <view class="menu-item marginleft zan-c-gray-dark">
        <view>{{array_type[search_status]}}</view>
        <view class="zan-icon zan-icon-arrow my-icon-down"></view>
      </view>
    </picker>
    <view class="menu-item menu-item-end zan-c-gray-dark" @tap="pick">
      <view class="search-btn">搜索</view>
    </view>
    <view class="s-time-btn-view">
    </view>
  </view>
  <view hidden="{{!start&&!end}}"  class="search-time-text">
    {{time_start}} 至 {{time_end}}
  </view>
  <view class="data-list">
    <view class="list-li">
      <view hidden="{{noData}}" class="zan-cell">
        <view class="list-day-text">
          {{count}}笔  ￥{{sum_price}}
        </view>
      </view>
      <view class="zan-cell" wx:for="{{list}}" wx:key wx:for-item="item">
        <image class="cell-img" src="{{item.type===1?item.voucher.previews[0]:item.goods.previews[0]}}"/>
        <view class="cell-c">
          <view class="cell-name">
            {{item.type===1?('代金券*'+item._count+'张:'+item.voucher.name):('商品'+item._count+'件:'+item.goods.name)}}
          </view>
          <view class="cell-small zan-c-gray-dark">
            <view class="zan-tag {{item._sum_status_class}}">{{item._sum_status}}</view>
            <text>{{item._sum_time}}</text>
          </view>
        </view>
        <view class="cell-r">
          <view class="cell-money zan-font-bold">¥{{item.amount?(item.amount/100):'0'}}</view>
          <view class="cell-small zan-c-gray-dark">{{item.customer_name}}</view>
        </view>
      </view>

    </view>
    <view hidden="{{!noData}}" class="zan-loadmore zan-loadmore--nodata">
      <view class="zan-loadmore__tips">暂无数据</view>
    </view>
  </view>
  <datepicker :show.sync="showPicker"/>
</template>
<script>
import wepy from "wepy";
import { api, root } from "@/config";
import request from "@/utils/request";
import datepicker from "@/components/common/datepicker";
import {getLocaleFullDateString,getLocaleTimeString,getLocaleDateString,price} from "@/utils/format";
export default class extends wepy.page {
  config = {
    navigationBarTitleText: "结算明细"
  };
  components ={
    datepicker
  }
  data = {
    search_type:'curr_day',
    search_status:'0',
    list: [],
    count:0,
    sum_price:0,
    wait_sum_price:0,
    sumResult: {},
    noData: true,
    noMore: false,
    page: 1,
    array_time:['今日','当月','上月'],
    array_type:['全部订单','待结算','已结算'],
    showPicker: false,
    start:null,
    end:null,
  }
  limit  = 10;
  onLoad() {
    const { merchant } = this.$root.$parent.globalData;
    if(merchant){
      this.fetchGetSumData(merchant.shop.id,merchant.id);
    }
    this.fetchData();
  }
  onReachBottom() {//上拉加载
   if (!this.noData && !this.noMore) {
     setTimeout(() => {
       this.page++;
       this.fetchData();
     }, 0);
   }
  }
  computed = {
    time_start () {
      return getLocaleDateString(this.start);
    },
    time_end () {
      return getLocaleDateString(this.end);
    }

  }
  events = {
    onDateConfirm(start, end) {
      if (!!start) {
        let [y, m, d] = start.split("-");
        if (!d) d = 1;
        start = +new Date(~~y, ~~m - 1, ~~d, 0, 0, 0);
      }
      if (!!end) {
        let [y, m, d] = end.split("-");
        if (!d) m = ~~m + 1;
        end = +new Date(~~y, ~~m - 1, ~~d + 1, 0, 0, 0);
      }
      const date = new Date(end);
      date.setSeconds(date.getSeconds()-1);
      setTimeout(() => {
        this.start = start;
        this.end = date.getTime();
        this.array_time = this.array_time.concat('选择');
        this.search_type = 'other';
        this.search_status = '0';
        this.resetData();
        this.fetchData();
      }, 0);
    }
  };
  resetData() {
    this.list = [];
    this.noData = false;
    this.noMore = false;
    this.page = 1;
  }
  methods = {
    bindPickerChangeTime(e) {
      const value = e.detail.value;
      if(value==='0'){
        this.search_type = 'curr_day';
        this.array_time.length = 3;
      }else if(value==='1'){
        this.search_type ='curr_month';
        this.array_time.length = 3;
      }else if(value==='2'){
        this.search_type ='prev_month';
        this.array_time.length = 3;
      }else{
        this.search_type ='other';
      }
    },
    bindPickerChangeType(e){
      const value = e.detail.value;
      this.search_status = value.toString();
    },
    pick() {
      this.showPicker = true;
    }
  };
  watch = {
    search_type() {
      if(this.search_type!=='other'){
        setTimeout(()=> {
          this.resetData();
          this.search_status = '0';
          this.end = null;
          this.start = null;
          this.fetchData();
        },0)
      }
    },
    search_status() {
      setTimeout(()=> {
        this.resetData();
        this.fetchData();
      },0)
    },
  };
  async fetchGetSumData(shop_id,id) {
    const result  = await request(`${api.merchantIndex}/${shop_id}`, {
      data: {}
    });
    result.sum_today_price = price(result.sum_today_price);
    result.wait_sum_price = price(result.wait_sum_price);
    result.sum_price = price(result.sum_price);
    this.sumResult = result;
    this.$apply();
  }
  async fetchData() {
    const { merchant } = this.$root.$parent.globalData;
    const opts = {
      shop_id:merchant.shop.id,
      include:'goods,voucher',
      limit:this.limit,
      page:this.page,
      count:true,
      status:3,
      pay_orders:true,
    }
    let search_time ='' ;
    if(this.start||this.end){
      search_time = this.start.toString()+","+this.end.toString();
    }else{
      const now = new Date();
      const nY = now.getFullYear();
      const nM = now.getMonth();
      const nD = now.getDate();
      if(this.search_type==='curr_day'){
        const s = new Date(nY,nM,nD);
        const e = new Date(nY,nM,nD,23,59,59);
        search_time = s.getTime().toString()+","+e.getTime().toString();
      }else if(this.search_type==='curr_month') {
        const s = new Date(nY,nM,1);
        const e = new Date(nY,nM+1,1);
        e.setSeconds(e.getSeconds()-1);
        search_time = s.getTime().toString()+","+e.getTime().toString();
      }else if(this.search_type==='prev_month'){
        const s = new Date(nY,nM-1,1);
        const e = new Date(nY,nM,1);
        e.setSeconds(e.getSeconds()-1);
        search_time = s.getTime().toString()+","+e.getTime().toString();
      }
    }
    if(this.search_status!=='0'){
      opts.sum_status = this.search_status==='2'?3:this.search_status;
      if(this.search_status==='1'){
        opts.pay_time = search_time;
      }else{
        opts.sum_time = search_time;
      }
    }else{
      opts.pay_time =  search_time;
    }
  
    let result;
    try {
      result  = await request(api.orders, {
        data: opts
      });
    } catch (e) {
      result = {rows:[]};
    }
    
    const data = result.rows;
   
    const opts_ = {
      pay_orders:1,
      status:3,
    }
    if(opts.sum_status){
      opts_.sum_status = opts.sum_status;
    }
    if(this.search_status==='1'||this.search_status==='0'){
      opts_.pay_time = search_time;
    }else{
      opts_.sum_time = search_time;
    }
    const sumResult  = await request(`${api.merchantIndex}/${merchant.shop.id}`, {
      data:opts_
    });
    
    const my_list = data.map(obj=>{
      if(obj.type===1){
        obj.voucher.previews =  obj.voucher.img?obj.voucher.img.split(",").map(item => root + item):[];
      }else if(obj.type===2){
        obj.goods.previews =  obj.goods.previews?obj.goods.previews.split(",").map(item => root + item):[];
      }
      obj._sum_status = ['已支付','待结算','上传文件','已结算'][obj.sum_status];
      obj._sum_status_class = ['zan-tag--recd','zan-tag--warn','zan-tag--new','zan-tag--primary'][obj.sum_status];
      const now = new Date();
      const sumtime = new Date(obj.sum_time);
      if(now.getFullYear()===sumtime.getFullYear()&&now.getMonth()===sumtime.getMonth()&&now.getDate()===sumtime.getDate()){
        obj._sum_time = "今天 "+getLocaleTimeString(obj.sum_time);
      }else{
        obj._sum_time = obj.sum_time? getLocaleFullDateString(obj.sum_time):'';
      }
      return obj;
    });
    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noData = false;
      this.noMore = true;
    }
    this.list = this.list.concat(my_list);
    this.count = result.count;
    this.sum_price = price(sumResult.sum_price);
    this.wait_sum_price = price(sumResult.wait_sum_price);
    this.$apply();
  }
}
</script>
