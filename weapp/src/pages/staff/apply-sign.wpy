 <style>
.apply-sign-tab {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  z-index: 1;
}
.zan-tab__item--selected .zan-tab__title {
  color: #f60;
  border-color: #f60;
}
.apply-sign-content {
  margin-top: 45px;
  padding-bottom: 50px;
}
.apply-sign-item {
  background: #fff;
  margin-bottom: 30rpx;
}

.apply-sign-item:last-child {
  margin-bottom: 0;
}
.apply-sign-item-header {
  padding: 20rpx;
  font-size: 13px;
  color: #ff9900;
}
.apply-sign-item-detail {
  padding: 20rpx;
  background: #f8f8f8;
  display: flex;
}
.apply-sign-item-img {
  width: 160rpx;
  height: 160rpx;
}
.m-r-3 {
  margin-right: 30rpx;
}

.m-t-1 {
  margin-top: 10rpx;
}

.m-b-2 {
  margin-bottom: 20rpx;
}
.m-l-2 {
  margin-left: 20rpx;
}
.title {
  font-size: 15px;
  color: #000;
}
.subtitle {
  font-size: 13px;
  color: #333;
}
.apply-sign-item-btns {
  text-align: right;
  padding: 20rpx;
}
.count {
  color: #ff9900;
  font-size: 16px;
}

.apply-sign-item-btns .zan-btn--small {
  height: 26px !important;
  line-height: 26px !important;
}

.apply-sign-fixed-footer .zan-btn--primary {
  background-color: #f90;
}

.apply-sign-fixed-footer button[disabled] {
  border-color: #e5e5e5 !important;
}

.apply-sign-fixed-footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
}
.zan-dialog--mask {
  z-index: 1;
}

.zan-dialog--container {
  z-index: 2;
}

.radio-group {
  color: #333;
  font-size: 15px;
}

.radio-group-item {
  display: flex;
  align-items: center;
  padding: 0 15px;
  height: 50px;
}
.radio-input {
  margin-left: 12px;
  border-bottom: 0.5px solid #bbb;
  text-align: center;
  flex: 1;
  max-width: 100px;
}

.radio-input-placeholder {
  font-size: 12px;
}
</style>
<template>
  <view>
    <view class="apply-sign-header"></view>
    <view class="apply-sign-tab zan-tab">
      <view class="zan-tab__bd">
        <repeat for="{{tabs}}" key="index" index="index" item="item">
          <view @tap="changeTab({{index}})" class="zan-tab__item {{activeTabIndex === index ? 'zan-tab__item--selected' : ''}}">
            <view class="zan-tab__title">{{item.label}}</view>
          </view>
        </repeat>
      </view>
    </view>
    <view class="apply-sign-content">
      <repeat for="{{records}}" key="index" index="index" item="item">
        <view class="apply-sign-item">
          <view class="apply-sign-item-header">
            <text>{{item.date}}</text>
            <text @tap="viewReason({{item.reason}})" wx:if="{{applyShow && item.status === 2}}" class="zan-icon zan-icon-question" style="float: right;color: #999;padding: 0 2px;"></text>
            <text style="float: right;color: #999;">{{item.statusText}}</text>            
          </view>
          <view class="apply-sign-item-detail">
            <image class="apply-sign-item-img m-r-3" src="{{item.image}}"/>
            <view class="apply-sign-item-desc">
              <view class="title m-t-1 m-b-2">{{item.gift}}</view>
              <view class="subtitle">
                <block wx:if="{{applyShow}}">
                  <text>申请数量:<text class="m-l-2 count">{{item.count}}</text></text>
                  <text style="margin-left: 30px;" wx:if="{{item.status > 0}}">通过数量:<text class="m-l-2 count">{{item.pass_count}}</text></text>
                </block>  
                <block wx:else>
                  <text>分配数量:<text class="m-l-2 count">{{item.count}}</text></text>
                  <text style="margin-left: 30px;" wx:if="{{item.status > 0}}">签收数量:<text class="m-l-2 count">{{item.sign_count}}</text></text>
                </block>
              </view>
            </view>
          </view>
          <view class="apply-sign-item-btns">
            <navigator wx:if="{{applyShow || item.status > 0}}" url="/pages/staff/apply-refund?action=apply&giftId={{item.giftId}}&giftName={{item.gift}}" class="zan-btn zan-btn--small zan-btn--plain zan-btn--primary">再次申请</navigator>
            <button wx:if="{{!applyShow && item.status === 0}}" @tap="signGift({{index}},{{item.id}})" class="zan-btn zan-btn--small zan-btn--plain zan-btn--primary">签收</button>          
          </view>
        </view>
      </repeat>
    </view>
    <view class="apply-sign-fixed-footer" wx:if="{{action === '申领'}}">
      <navigator hover-class="none" url="/pages/staff/apply-refund?action=apply" class="zan-btn zan-btn--large zan-btn--primary">申领礼品</navigator>
    </view>
    <view hidden="{{!noData}}" class="zan-loadmore zan-loadmore--nodata">
      <view class="zan-loadmore__tips">暂无数据</view>
    </view>
    <toptips/>
    <view class="zan-dialog {{showDialog ? 'zan-dialog--show' : ''}}">
      <view class="zan-dialog--mask"></view>
      <view class="zan-dialog--container">
        <view class="zan-dialog__header">选择签收数量</view>
        <view class="zan-dialog__content zan-dialog__content--title">
          <radio-group class="radio-group" bindchange="bindRadioChange">
            <label class="radio-group-item">
              <radio value="all" checked="{{signType === 'all'}}"/>
              <view>全部签收</view>
            </label>
            <label class="radio-group-item">
              <radio value="part" checked="{{signType === 'part'}}"/>
              <view>部分签收</view>
              <input  value="0" placeholder-class="radio-input-placeholder" class="radio-input" wx:if="{{signType === 'part'}}" type="number" bindinput="bindSignCountChange" focus placeholder="输入签收数量"/>
            </label>
            <label class="radio-group-item">
              <radio value="none" checked="{{signType === 'none'}}"/>
              <view>全部拒收</view>
            </label>
          </radio-group>
        </view>
        <view class="zan-dialog__footer zan-dialog__footer--horizon">
          <button @tap="cancelSign" class="zan-dialog__button zan-btn" style="color:#333;">取消</button>
          <button @tap="confirmSign" class="zan-dialog__button zan-btn" style="color:#3CC51F;">确定</button>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";
import toptips from "@/components/common/toptips";
import { api, root } from "@/config";
import request from "@/utils/request";
import { getLocaleFullDateString } from "@/utils/format";
export default class extends wepy.page {
  config = {
    navigationBarTitleText: "申领"
  };

  signTabs = [
    { label: "全部" },
    { label: "待签收", value: "0" },
    { label: "已签收", value: "1,2" },
    { label: "已拒收", value: "3" }
  ];
  applyTabs = [
    { label: "全部" },
    { label: "未审核", value: "0" },
    { label: "未通过", value: "2" },
    { label: "已通过", value: "1" }
  ];

  data = {
    action: "申领",
    activeTabIndex: 0,
    noMore: false,
    noData: false,
    records: [],
    page: 1,
    showDialog: false,
    signType: "all", // all, part, none
    signCount: 0,
    signIndex: 0
  };

  components = {
    toptips
  };

  limit = 10;

  computed = {
    tabs() {
      return this.action === "申领" ? this.applyTabs : this.signTabs;
    },
    applyShow() {
      return this.action === "申领";
    }
  };

  watch = {
    activeTabIndex() {
      setTimeout(() => {
        this.reset();
        this.fetchData();
      }, 0);
    }
  };

  methods = {
    changeTab(index) {
      if (this.activeTabIndex !== index) {
        this.activeTabIndex = index;
      }
    },
    viewReason(reason) {
      wx.showModal({
        title: "拒绝原因",
        content: reason,
        showCancel: false
      });
    },
    signGift(index, id) {
      // wx.showModal({
      //   title: "",
      //   content: "确定要签收此礼品吗？",
      //   success: res => {
      //     if (res.confirm) {
      //       this.sign(index, id);
      //     }
      //   }
      // });
      this.signIndex = index;
      this.showDialog = true;
    },
    bindRadioChange(e) {
      this.signType = e.detail.value;
    },
    bindSignCountChange(e) {
      this.signCount = e.detail.value;
    },
    confirmSign() {
      this.showDialog = false;
      this.sign(this.signIndex);
    },
    cancelSign() {
      this.resetDialog();
    }
  };

  onReachBottom() {
    if (!this.noData && !this.noMore) {
      setTimeout(() => {
        this.page++;
        this.fetchData();
      }, 0);
    }
  }

  onLoad({ action }) {
    if (action === "sign") {
      this.action = "签收";
      wx.setNavigationBarTitle({
        title: this.action
      });
    }
  }

  onShow() {
    setTimeout(() => {
      this.reset();
      this.fetchData();
    }, 0);
  }

  reset() {
    this.page = 1;
    this.noMore = this.noData = false;
    this.records = [];
  }

  fetchData() {
    this.action === "申领" ? this.fetchApply() : this.fetchSign();
  }

  resetDialog() {
    this.showDialog = false;
    this.signIndex = 0;
    this.signType = "all";
    this.$apply();
  }

  applyStatusText = {
    0: "待审核",
    1: "已通过",
    2: "已拒绝"
  };

  async fetchApply() {
    const queries = {
      page: this.page,
      limit: this.limit,
      include: "gift",
      sub_netspot_id: this.$root.$parent.globalData.staff.netspot_id,
      order: "application_time DESC"
    };
    const status = this.tabs[this.activeTabIndex].value;
    if (!!status) {
      queries.status = status;
    }

    let data = await request(api.examines, { data: queries });
    data = data.map(item => ({
      gift: item.gift.name,
      giftId: item.gift.id,
      id: item.id,
      date: getLocaleFullDateString(item.application_time),
      signed: item.status === 3,
      pass_count: item.pass_count || 0,
      reason: item.option,
      status: item.status,
      statusText: this.applyStatusText[item.status],
      count: item._count,
      image: root + item.gift.imgs.split(",")[0]
    }));

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noMore = true;
    }
    this.records = this.records.concat(data);
    this.$apply();
  }

  signStatusText = {
    0: "待签收",
    1: "全部签收",
    2: "部分签收",
    3: "全部拒收"
  };

  async fetchSign() {
    const queries = {
      page: this.page,
      limit: this.limit,
      include: "gift",
      allocation_in_id: this.$root.$parent.globalData.staff.netspot_id,
      order: "create_time DESC"
    };
    const status = this.tabs[this.activeTabIndex].value;
    if (!!status) {
      queries.status = status;
    }

    let data = await request(api.stockRecs, { data: queries });
    data = data.map(item => ({
      examine_id: item.examine_id,
      gift: item.gift.name,
      giftId: item.gift.id,
      id: item.id,
      date: getLocaleFullDateString(item.create_time),
      signed: item.status > 0,
      statusText: this.signStatusText[item.status],
      status: item.status,
      count: item.allocation_count,
      sign_count: item.sign_count || 0,
      pass_count: item.pass_count || 0,
      image: root + item.gift.imgs.split(",")[0],
      allocation_in_id: item.allocation_in_id,
      allocation_out_id: item.allocation_out_id
    }));

    if (data.length === 0) {
      this.page === 1 ? (this.noData = true) : (this.noMore = true);
    } else if (data.length < this.limit) {
      this.noMore = true;
    }
    this.records = this.records.concat(data);
    this.$apply();
  }

  async sign(index) {
    try {
      let count, status;
      const record = this.records[index];
      if (this.signType === "all") {
        count = record.count;
        status = 1;
      } else if (this.signType === "part") {
        status = 2;
        count = ~~this.signCount;
        if (count > record.count) {
          throw new Error("签收数量不能超过实际数量");
        }
        if (count === record.count) {
          status = 1;
        }
        if (count === 0) {
          status = 3;
        }
      } else {
        count = 0;
        status = 3;
      }

      const promises = [
        request(api.stockRec.replace(":id", record.id), {
          method: "PUT",
          data: {
            status,
            sign_count: count,
            sign_time: new Date()
          }
        })
      ];
      // 非全部签收, 生成自动退还记录
      if (status > 1) {
        promises.push(
          request(api.stockRecs, {
            method: "POST",
            data: {
              gift_id: record.giftId,
              examine_id: record.examine_id,
              active_type: 1,
              allocation_in_id: record.allocation_out_id,
              allocation_out_id: record.allocation_in_id,
              allocation_count: record.count - count,
              create_time: new Date(),
              pass_count: record.count - count,
              status: 0,
              autoRefund: true
            }
          })
        );
      }

      await Promise.all(promises);

      wx.showToast({
        title: "操作成功",
        icon: "success",
        duration: 1000
      });
      // 从当前条件中删除
      if (this.tabs[this.activeTabIndex].value == record.status) {
        this.records.splice(index, 1);
        this.noData = this.records.length === 0;
      }
      Object.assign(record, {
        signed: true,
        statusText: this.signStatusText[status],
        status: status,
        sign_count: count
      });
      this.$apply();
    } catch (err) {
      this.$invoke("toptips", "showTopTips", err.message, 1200);
    } finally {
      this.resetDialog();
    }
  }
}
</script>
